name: Deploy ECS

on:
  workflow_call:
    inputs:
      environment-number:
        required: true
        type: string
      app-name:
        required: true
        type: string
      app-image-name:
        required: true
        type: string
      app-image-tag-prefix:
        required: true
        type: string
      commit-path:
        required: true
        type: string
      find-pattern:
        required: true
        type: string
      aws-region:
        required: true
        type: string
      ecr-url:
        required: true
        type: string
      test-branch:
        required: false
        type: string
      test-env:
        required: false
        type: string
      role-to-assume:
        required: true
        type: string
      container-name:
        required: true
        type: string
      ecs-cluster-name:
        required: true
        type: string
      ecs-service-name:
        required: true
        type: string
      task-definition-family:
        required: true
        type: string

jobs:
  deploy-argocd:
    name: build and deploy to argocd master / dev model
    runs-on: ubuntu-latest
    # needs: tests
    steps:
      - uses: actions/checkout@v3

      - name: Select Environment
        id: select-environment
        uses: INFRALESS-IO/github-actions/.github/actions/select-environment-master-dev@0.0.39
        with:
          test-branch: "${{ inputs.test-branch }}"
          test-env: "${{ inputs.test-env }}"
      - name: Assume InfraDeployGitHub
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-region: "${{ inputs.aws-region }}"
          role-to-assume: "${{ inputs.role-to-assume }}"
          role-duration-seconds: 1800

      - name: Install AWS CLI
        id: install-aws-cli
        uses: INFRALESS-IO/github-actions/.github/actions/install-aws-cli@0.0.28



      - name: Fetch GitHub Deploy Key
        id: ssm-secret-fetch-github-deploy-key
        uses: INFRALESS-IO/github-actions/.github/actions/ssm-secret-fetch@0.0.28
        continue-on-error: true
        with:
          aws-region: "${{ inputs.aws-region }}"
          secret-path: "/common/github/c-k8s-helm-chart/deploy-key"


      - name: Write Release
        run: |
          echo ${{steps.select-environment.outputs.release-tag}} >> release.txt


      - name: COMMIT CHANGE AND PRODUCE RELEASE TAG
        id: commit-and-tag
        uses: INFRALESS-IO/github-actions/.github/actions/commit-and-tag@0.0.28
        with:
          release-tag: "${{ steps.select-environment.outputs.release-tag }}"
          commit-path: "${{ inputs.commit-path }}"

      # - name: UPDATE ARGOCD APPS DEFINITION WITH THE NEW RELEASE TAG
      #   id: update-source
      #   run: |

      #     # UPDATE ARGOCD APPS DEFINITION WITH THE NEW RELEASE TAG
      #     for file in ./devops/argocd/${{steps.select-environment.outputs.environment}}/*.yaml
      #     do
      #       echo "$file"
      #       echo "PREVIOUS"
      #       sed -i "s#<RELEASE_TAG>#${{steps.select-environment.outputs.release-tag}}#g" "$file" | grep -n imageVersion $file
      #       echo "UPDATED" && grep -n imageVersion $file
      #     done

      #     git config --global user.email "you@example.com"
      #     git config --global user.name "Your Name"
      #     git add devops/*
      #     git commit -m "UPDATE RELEASE DETAILS"
      #     git tag ${{steps.select-environment.outputs.release-tag}}
      #     git push origin ${{steps.select-environment.outputs.release-tag}}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push to ECR
        env:
          APP_IMAGE_TAG_PREFIX:  ${{ inputs.app-image-tag-prefix }}
          APP_IMAGE_NAME: ${{ inputs.app-image-name }}
          APP_IMAGE_ECR_URL: ${{ inputs.ecr-url }}
        run: |
          IFS=', ' read -r -a array <<< "$APP_IMAGE_TAG_PREFIX"
          for element in "${array[@]}"
          do
            echo "$element"
            export APP_IMAGE=${APP_IMAGE_ECR_URL}/${APP_IMAGE_NAME}:${element}-${{steps.select-environment.outputs.release-tag}}
            docker build --target $element -t $APP_IMAGE -f Dockerfile .
            docker push $APP_IMAGE
          done


      - name: Get task definition
        run: |
          aws ecs describe-task-definition \
          --task-definition  ${{inputs.task-defenition-family}} \
          --query taskDefinition > task-definition.json

      - name: Update task definition
        run: |
          jq '(.containerDefinitions[] | select(.name == "${{inputs.container-name"})) .image = "${APP_IMAGE}"'


      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: task-definition.json
          service: "${{inputs.ecs-service-name}}"
          cluster: "${{inputs.ecs-cluster-name}}"
          wait-for-service-stability: true

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{steps.select-environment.outputs.release-tag}}
          release_name: Release ${{steps.select-environment.outputs.release-tag}}
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          generate_release_notes: true
